"""
Django settings for newblogs project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
from dotenv import load_dotenv
from pathlib import Path
import os
import django_heroku
import dj_database_url
from decouple import config
from google.cloud import storage
from google.oauth2 import service_account
from base64 import b64decode
from decouple import config
import comments

load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = os.environ.get('SECRET_KEY')
SECRET_KEY =config('SECRET_KEY')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG =config('DEBUG') =='True'

# Application definition
# GOOGLE CLOUD STORAGE SETTING
# DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
# GS_BUCKET_NAME = 'data-analytic-bucket'  # Provide your bucket name here
# GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
#     os.path.join(BASE_DIR, 'demon/demon.json')
# )

# MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/'


SITE_ID = 1
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blogs',
    'widget_tweaks',
    'django_extensions',
    'django.contrib.sitemaps',
    'django.contrib.sites',
   # 'django_summernote'
    'tinymce',
    'markitup',
    'mptt',
    'comments',
    'markdownx',
    


]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
     'whitenoise.middleware.WhiteNoiseMiddleware'
]

ROOT_URLCONF = 'newblogs.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR,'templates','static'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'newblogs.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# db_rom_env = dj_database_url.config('conn_max_age=600')
# DATABASES['default'].update(db_rom_env)
# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/


STATIC_URL = '/static/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),

]
MEDIA_URL ='media/'

X_FRAME_OPTIONS = 'SAMEORIGIN'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'auth.User'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'blogs.backends.EmailOrUsernameModelBackend',  # Ensure this is the correct path
]

# Extend session cookie age to 1 day (86400 seconds)
SESSION_COOKIE_AGE = 86400

# Make sessions expire when the user closes the browser
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

LOGING_URL ='/login/'



# SUMMERNOTE_CONFIG = {
#     'summernote': {
#         'width': '100%',
#         'height': '450',
#         'codemirror': {
#             'mode': 'htmlmixed',
#             'lineNumbers': 'true',
#             'lineWrapping': 'true',
#             'thame':'monokai',
#         },
#         'css': (
#             'https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.62.0/codemirror.min.css',
#             'https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css',
#             # Inline custom CSS
#             'data:text/css;charset=utf-8,' + (
#                 'body .note-editable { '
#                 'width: 100%; '
#                 'overflow-x: auto; '
#                 'background: #f8f9fa; '
#                 'border: 1px solid #ced4da; '
#                 'border-radius: .25rem; '
#                 'padding: 1rem; '
#                 '} '
#                 '.CodeMirror { '
#                 'width: 100% !important; '
#                 'border: 1px solid #ced4da; '
#                 'border-radius: .25rem; '
#                 '} '
#                 'pre, code { '
#                 'background: white; '
#                 'border: 1px solid #ced4da; '
#                 'border-radius: .25rem; '
#                 'padding: .5rem; '
#                 'overflow-x: 1000%; '
#                 'display: block; '
#                 'white-space: pre-wrap; '
#                 'word-wrap: break-word; '
#                 '}'
#             )
#         ),
#     }
# }

# #TINYMCE_JS_URL = "https://cdn.tiny.cloud/1/pncgjiu1hd1pajsiie6xtro3xmi6az2ctrdtvhhdvz4892nx/tinymce/6/tinymce.min.js";
# TINYMCE_JS_URL = 'https://cdn.tiny.cloud/1/pncgjiu1hd1pajsiie6xtro3xmi6az2ctrdtvhhdvz4892nx/tinymce/7/tinymce.min.js'
# TINYMCE_COMPRESSOR = False
# TINYMCE_DEFAULT_CONFIG = {
#     'height': 360,
#     'width': 1000,
#     'cleanup_on_startup': True,
#     'custom_undo_redo_levels': 20,
#     'selector': 'textarea',
#     'theme': 'modern',
#     'plugins': '''
#         textcolor save link image media preview codesample contextmenu
#         table code lists fullscreen  insertdatetime  nonbreaking
#         contextmenu directionality searchreplace wordcount visualblocks
#         visualchars code fullscreen autolink lists  charmap print  hr
#         anchor pagebreak
#         ''',
#     'toolbar1': '''
#         fullscreen preview bold italic underline | fontselect,
#         fontsizeselect  | forecolor backcolor | alignleft alignright |
#         aligncenter alignjustify | indent outdent | bullist numlist table |
#         | link image media | codesample |
#         ''',
#     'toolbar2': '''
#         visualblocks visualchars |
#         charmap hr pagebreak nonbreaking anchor |  code |
#         ''',
#     'contextmenu': 'formats | link image',
#     'menubar': True,
#     'statusbar': True,
# }



MARKITUP_FILTER = ('markdown.markdown', {'safe_mode':'escape'})
MARKITUP_SET = 'markitup/sets/markdown'
MARKITUP_SKIN = 'markitup/skins/simple'

MARKDOWN_EXTRA = {
    'code-friendly': True,  # Enable code-friendly mode
    'html-in-title': True,  # Allow HTML in titles
    'tags': ['fenced-code-blocks'],  # Enable fenced code blocks
    'css': '.codehilite { background-color: #333333; color: #333333; }',  # Custom CSS for code blocks
}


#APPEND_SLASH = False


# Activate Django-Heroku.
django_heroku.settings(locals())